{"version":3,"sources":["components/Task.js","components/AddTask.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","react_default","a","createElement","className","onClick","handleTaskClick","bind","id","classnames","completed","children","handleDelete","AddTask","state","task","_this2","this","onSubmit","e","preventDefault","handleSubmit","setState","htmlFor","type","placeholder","value","onChange","target","React","Component","TodoList","todos","uuid","_this","concat","Object","objectSpread","filter","todo","map","localStorage","tasks","getItem","JSON","parse","setItem","stringify","components_AddTask","components_Task","key","App","_useState","useState","_useState2","slicedToArray","lightMode","setLightMode","style","color","Todolist","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc21ea97.chunk.js","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nconst Task = props => {\n  return (\n    <li>\n      <div\n        className=\"task__container\"\n        onClick={props.handleTaskClick.bind(this, props.id)}\n      >\n        <div\n          className={classnames(\"task__box\", { completed: props.completed })}\n        >\n          {props.completed ? \"✔\" : null}\n        </div>\n        <span className=\"task__text\">{props.children}</span>\n      </div>\n      <div className=\"delete_box\">\n        <span\n          className=\"delete_btn\"\n          onClick={props.handleDelete.bind(this, props.id)}\n        >\n          &times;\n        </span>\n      </div>\n    </li>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\n\nclass AddTask extends React.Component {\n  state = {\n    task: \"\"\n  };\n\n  render() {\n    const { task } = this.state;\n    return (\n      <div className=\"addTask__container\">\n        <h2 className=\"addTask__title\">\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              this.props.handleSubmit(task);\n              this.setState({ task: \"\" });\n            }}\n          >\n            <label htmlFor=\"addTask\">Adicione uma nova tarefa</label>\n            <input\n              type=\"text\"\n              id=\"addTask\"\n              placeholder=\"Ex: Comprar sorvete\"\n              value={task}\n              onChange={e => this.setState({ task: e.target.value })}\n            />\n          </form>\n        </h2>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\nimport Task from \"./Task\";\nimport AddTask from \"./AddTask\";\nimport uuid from \"uuid\";\n\nclass TodoList extends React.Component {\n  state = {\n    todos: []\n  };\n\n  handleSubmit = task => {\n    const id = uuid();\n    this.setState(state => ({\n      todos: [{ id, task, completed: false }].concat(state.todos)\n    }));\n  };\n\n  handleDelete = id => {\n    this.setState(state => ({\n      ...state,\n      todos: state.todos.filter(todo => todo.id !== id)\n    }));\n  };\n\n  handleTaskClick = id => {\n    this.setState(state => ({\n      ...state,\n      todos: state.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        } else {\n          return todo;\n        }\n      })\n    }));\n  };\n\n  componentDidMount() {\n    let todos;\n    if (localStorage.tasks) {\n      todos = localStorage.getItem(\"tasks\");\n      this.setState({ todos: JSON.parse(todos) });\n    } else {\n      todos = [];\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\"tasks\", JSON.stringify(this.state.todos));\n  }\n\n  render() {\n    return (\n      <div className=\"TodoList_container\">\n        <h1>Tarefas</h1>\n        <p className=\"subtitle\">Just do it!</p>\n        <AddTask handleSubmit={this.handleSubmit} />\n        <ul className=\"TodoList\">\n          {this.state.todos.map(todo => {\n            return (\n              <Task\n                key={todo.id}\n                id={todo.id}\n                handleDelete={this.handleDelete}\n                completed={todo.completed}\n                handleTaskClick={this.handleTaskClick}\n              >\n                {todo.task}\n              </Task>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport TodoList from \"./components/Todolist\";\n\nfunction App() {\n  const [lightMode, setLightMode] = useState(true);\n\n  return (\n    <div className={lightMode ? \"App light-mode\" : \"App\"}>\n      <div className=\"mode-switcher\">\n        <span className=\"mode-switcher__icon\" style={{ color: \"#ffd411\" }}>\n          ☀\n        </span>\n        <input\n          type=\"checkbox\"\n          id=\"switch\"\n          onClick={() => setLightMode(!lightMode)}\n        />\n        <label htmlFor=\"switch\">Mudar tema</label>\n        <span\n          className=\"mode-switcher__icon\"\n          style={lightMode ? { color: \"#376db3\" } : { color: \"white\" }}\n        >\n          ☾\n        </span>\n      </div>\n      <div className=\"bg_text\">Get s*** done!</div>\n      <TodoList />\n      <footer>\n        Created and designed by{\" \"}\n        <a\n          className=\"my-name\"\n          href=\"https://github.com/caiopoyares/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Caio Poyares\n        </a>\n        .\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}